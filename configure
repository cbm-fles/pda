#!/bin/bash

set -e
set -u

# Copyright (c) 2015, Dominic Eschweiler
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Automatic checking

ARCH=`uname -a | awk '{ print $(NF-1) }'`
OS=`uname -a | awk '{ print $(NF) }'`
echo "Configuring the Portable Driver Architecture (PDA) library"

CONFIGURE_PATH=`readlink -f $0`
CONFIGURE_PATH=`dirname $CONFIGURE_PATH`

BUILD_PATH="$( readlink -f `pwd`)"

LD_VERSION=`cat VERSION`
LD_CUR=`echo $LD_VERSION | awk -F'.' '{ print $1 }'`
LD_REV=`echo $LD_VERSION | awk -F'.' '{ print $2 }'`
LD_AGE=`echo $LD_VERSION | awk -F'.' '{ print $3 }'`

KMOD_AVAIL=""
KMOD_LD=""

NUMA_AVAIL=""
NUMA_LD=""

MODPROBE="yes"
MODPROBE_MODE="#define MODPROBE_MODE"

# Parameters
PREFIX="/usr"
DEBUG=""
NUMA="true"
EXTRA_DEFINES=""


help()
{
    echo
    echo "usage: configure <options>"
    echo "    --help  (print this message)"
    echo "    --prefix=<install path>"
    echo "    --debug=<true|false>"
    echo "    --numa=<true|false>"
    echo "    --modprobe=<true|false>"
    echo "    --extra=<additional defines, comma separated>"
}



echo -n "PARAMETERS      : "

for PARAMETER in $@
do
    echo -n "$PARAMETER "
    PARAM=`echo $PARAMETER | cut -f1 -d=`
    VALUE=`echo $PARAMETER | cut -f2 -d=`
    case $PARAM in
        "--help" )
            help
            exit
        ;;

        "--prefix" )
	    PREFIX=$VALUE
            continue
        ;;

	"--debug"  )
            if [ $VALUE == "true" ]
            then
                DEBUG=".debug"
            fi
            continue
	;;

	"--numa"  )
            if [ $VALUE == "false" ]
            then
                NUMA="false"
            fi
            continue
	;;

	"--modprobe"   )
            if [ $VALUE == "false" ]
            then
                MODPROBE="no"
                MODPROBE_MODE=" "
            fi
            continue
	;;

        "--extra" )
	    EXTRA_DEFINES=$VALUE
            continue
        ;;

        *          )
            echo "Unknown parameter $PARAMETER!"
            exit -1
        ;;
    esac
done
echo

echo "PREFIX          : $PREFIX"

test_gcc()
{
    echo -n "CHECK (gcc)     : "
    which gcc
}

test_libtool()
{
    echo -n "CHECK (libtool) : "
    which libtool
}

test_make()
{
    echo -n "CHECK (make)    : "
    which make
}

test_libpci()
{
    echo -n "CHECK (libpci)  : "
    $1 -lpci test/checks/main.c
    echo "yes"
}

test_libnuma()
{
    set +o errexit
    echo -n "CHECK (libnuma) : "
    $1 -lnuma test/checks/numa.c 2> /dev/null

    if [[ $? -ne 0 ]]
    then
        echo "no"
    else
        NUMA_AVAIL="#define NUMA_AVAIL"
        NUMA_LD="LDFLAGS+=-lnuma"
        echo "yes"
    fi
    set -e
}

test_libkmod()
{
    set +o errexit
    echo -n "CHECK (libkmod) : "
    $1 -lkmod test/checks/kmod.c 2> /dev/null

    if [[ $? -ne 0 ]]
    then
        echo "no"
    else
        KMOD_AVAIL="#define KMOD_AVAIL"
        KMOD_LD="LDFLAGS+=-lkmod"
        echo "yes"
    fi
    set -e
}

#----------------------------------------------------------------------
lnk_base()
{
    source $CONFIGURE_PATH/mk/arch_in.files

    for DIR in $BUILD_DIRS
    do
	mkdir $BUILD_PATH/$DIR
    done

    for FILE in $BUILD_FILES
    do
        ln -s $CONFIGURE_PATH/$FILE $BUILD_PATH/$FILE
    done
}

lnk_arch()
{
    source $CONFIGURE_PATH/mk/$1.files
    for FILE in $ARCH_FILES
    do
        FILE_ONLY=`basename $FILE`
	FILE_ONLY=`echo "${FILE_ONLY%_*.*}"`
        ln -s $CONFIGURE_PATH/$FILE $BUILD_PATH/src/$FILE_ONLY.inc
    done

    for FILE in $ARCH_EXTERNALS
    do
        FILE_ONLY=`basename $FILE`
        ln -s $CONFIGURE_PATH/$FILE $BUILD_PATH/src/$FILE_ONLY
    done
}

gen_config()
{
    echo "#ifndef CONFIG_H"                    >  $BUILD_PATH/src/config.h
    echo "#define CONFIG_H"                    >> $BUILD_PATH/src/config.h
    echo "#define PDA_VERSION \"$LD_VERSION\"" >> $BUILD_PATH/src/config.h
    echo "#define PDA_CURRENT $LD_CUR"         >> $BUILD_PATH/src/config.h
    echo "#define PDA_REVISION $LD_REV"        >> $BUILD_PATH/src/config.h
    echo "#define PDA_AGE $LD_AGE"             >> $BUILD_PATH/src/config.h
    echo "$KMOD_AVAIL"                         >> $BUILD_PATH/src/config.h
    echo "$NUMA_AVAIL"                         >> $BUILD_PATH/src/config.h
    echo "$MODPROBE_MODE"                      >> $BUILD_PATH/src/config.h

    for DEF in ${EXTRA_DEFINES//,/ }
    do
      echo "#define $DEF"                      >> $BUILD_PATH/src/config.h
    done

    echo "#endif  /* CONFIG_H */"              >> $BUILD_PATH/src/config.h
}

linux()
{
    # checking
    # add a check for uio or vfio
    test_gcc
    test_libtool
    test_make
    test_libpci  gcc
    if [ $NUMA == "false" ]
    then
        echo "CHECK (libnuma) : deactivated"
    else
        test_libnuma gcc
    fi
    test_libkmod gcc

    echo "OS              : Linux"
    BUILD_PATH_POSTFIX="build_linux"

    SUBSYSTEM="uio"

    case "$1" in
        "GenuineIntel"|"AuthenticAMD"|"i386"|"x86"|"x86_64" ) 
                         echo "ARCH            : Intel x86"
                	 BUILD_PATH_POSTFIX=$BUILD_PATH_POSTFIX"_x86_"$SUBSYSTEM
                         if [ $CONFIGURE_PATH == $BUILD_PATH ]
                         then
	                     BUILD_PATH="$BUILD_PATH/$BUILD_PATH_POSTFIX"
                             if [ -d $BUILD_PATH  ]
                             then
                                 echo "Build directory $BUILD_PATH already exists (aborting -> run 'make mrproper' to run a clean configure)"
                                 exit -1
                             else
                                 mkdir $BUILD_PATH
                             fi
                         fi
                         ln -s $CONFIGURE_PATH/mk/linux_x86_$SUBSYSTEM.mk$DEBUG $BUILD_PATH/arch.mk
                         lnk_base
                         lnk_arch linux_x86_$SUBSYSTEM
                         ;;

        *              ) echo "Unsupported hardware!"
                         exit
                         ;;
    esac

    echo "BUILD_PATH      : $BUILD_PATH"

    gen_config
}


case "$OS" in
  "GNU/Linux"   ) linux $ARCH;;
  *             ) echo "unsupported OS!";;
esac

echo "MODPROBE_MODE   : $MODPROBE"

ln -s $CONFIGURE_PATH/mk/Makefile $BUILD_PATH
ln -s $CONFIGURE_PATH/mk/Makefile.splint $BUILD_PATH
ln -s $CONFIGURE_PATH/tools/scripts $BUILD_PATH
ln -s $CONFIGURE_PATH/share $BUILD_PATH

echo "LD_VERSION = $LD_VERSION" >  $BUILD_PATH/gen.mk            
echo "LD_CUR     = $LD_CUR"     >> $BUILD_PATH/gen.mk
echo "LD_REV     = $LD_REV"     >> $BUILD_PATH/gen.mk
echo "LD_AGE     = $LD_AGE"     >> $BUILD_PATH/gen.mk
echo "PREFIX     = $PREFIX"     >> $BUILD_PATH/gen.mk
echo "DESTDIR   ?= $PREFIX"     >> $BUILD_PATH/gen.mk
echo "$NUMA_LD"                 >> $BUILD_PATH/gen.mk
echo "$KMOD_LD"                 >> $BUILD_PATH/gen.mk
